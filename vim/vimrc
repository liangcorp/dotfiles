syntax on
filetype plugin indent on

" set nocompatible
set number
set tabstop=4
set softtabstop=0
set shiftwidth=4
set expandtab
set path+=**
set wildmenu
set hidden

set wildignore=*.exe,*.dll,*.pdb

set cursorline
hi cursorline cterm=none term=none
autocmd WinEnter * setlocal cursorline
autocmd WinLeave * setlocal nocursorline
hi CursorLine cterm=NONE ctermbg=238

set ruler
set t_Co=256
set guioptions=egmrti
set gfn=Monospace\ 10
" set autowrite

" utf-8 byte sequence
set encoding=utf-8

set is
set ignorecase
set smartcase

set clipboard=unnamedplus

set gp=git\ grep\ -n

" ---------- trim whitespace ----------
fun! TrimWhitespace()
    let l:save = winsaveview()
    keeppatterns %s/\s\+$//e
    call winrestview(l:save)
endfun
autocmd BufWritePre * call TrimWhitespace()

" ------------------ One Dark -------------------
set background=dark
highlight Function ctermfg=Blue
highlight Comment ctermfg=DarkGray
highlight Normal ctermfg=Gray
highlight Constant ctermfg=Cyan
highlight Statement ctermfg=Magenta
highlight Keyword ctermfg=Magenta
highlight Conditional ctermfg=Gray
highlight Exception ctermfg=Gray
highlight Operator ctermfg=Gray
highlight Label ctermfg=Magenta
highlight Repeat ctermfg=Gray
highlight Type ctermfg=Yellow
highlight StorageClass ctermfg=Magenta
highlight Number ctermfg=DarkYellow
highlight PreCondit ctermfg=Magenta
highlight Include ctermfg=Blue
highlight Macro ctermfg=Green
highlight String ctermfg=Green
highlight SpecialChar ctermfg=Red
highlight SpecialComment ctermfg=LightGreen
highlight LineNr ctermfg=DarkGray
unlet c_comment_strings

" ------------- Status line -----------
set laststatus=2
set statusline=
set statusline+=%{StatuslineMode()}
set statusline+=\ |
set statusline+=%{b:gitbranch}
set statusline+=\ |
set statusline+=%f
set statusline+=%=
set statusline+=%y
set statusline+=\ |
set statusline+=%P
set statusline+=\ |
set statusline+=%l
set statusline+=:
set statusline+=%c
hi statusline ctermbg=black ctermfg=lightgray

function! StatuslineMode()
  let l:mode=mode()
  if l:mode==#"n"
    return "NORMAL"
  elseif l:mode==?"v"
    return "VISUAL"
  elseif l:mode==#"i"
    return "INSERT"
  elseif l:mode==#"R"
    return "REPLACE"
  elseif l:mode==?"s"
    return "SELECT"
  elseif l:mode==#"t"
    return "TERMINAL"
  elseif l:mode==#"c"
    return "COMMAND"
  elseif l:mode==#"!"
    return "SHELL"
  endif
endfunction

function! StatuslineGitBranch()
  let b:gitbranch=""
  if &modifiable
    try
      let l:dir=expand('%:p:h')
      let l:gitrevparse = system("git -C ".l:dir." rev-parse --abbrev-ref HEAD")
      if !v:shell_error
        let b:gitbranch="(".substitute(l:gitrevparse, '\n', '', 'g').") "
      endif
    catch
    endtry
  endif
endfunction

augroup GetGitBranch
  autocmd!
  autocmd VimEnter,WinEnter,BufEnter * call StatuslineGitBranch()
augroup END

" ------------- key mappings -----------
" clear highlighting
nnoremap <Esc>  :nohlsearch<CR>

" set scl=no   " force the signcolumn to disappear

let mapleader="\\"

" Move blocks up and down
vnoremap J :m '>+1<CR>gv=gv
vnoremap K :m '<-2<CR>gv=gv

" Keep curser in the same position
nnoremap J mzJ`z

" Keey curser in the same position during move
nnoremap <C-d> <C-d>zz
nnoremap <C-u> <C-u>zz

" Paste over the highlighted word with copied word
xnoremap <Leader>p "\"_dP

" Keep curser during search
nnoremap n nzzzv
nnoremap N Nzzzv

" Increase and decrease number
nnoremap + <C-a>
nnoremap - <C-x>

" Move between panels
nnoremap <C-h> <C-w><C-h>
nnoremap <C-l> <C-w><C-l>
nnoremap <C-j> <C-w><C-j>
nnoremap <C-k> <C-w><C-k>

" Resizing panels
nnoremap <C-Left> :vertical resize +3<CR>
nnoremap <C-Right> :vertial resize -3<CR>

nnoremap <space>co :copen<CR>
nnoremap <space>cc :cclose<CR>

nnoremap <space>ls :ls<CR>

nnoremap <C-d> <C-d>zz
nnoremap <C-u> <C-u>zz

" Move between buffers
nnoremap <Tab> :bnext<CR>
nnoremap <S-Tab> :bprevious<CR>

" Autocomplete
" <C-X><C-n> for just this file
" <C-X><C-f> for filename
" <C-X><C-]> for tags only
" <C-n> for anything specified by the 'complete' option

" Tag Jumping
" <C-]> to jump to tag under cursor
" g<C-]> for ambiguous tags
" <C-t> to jump back up the tag stack
