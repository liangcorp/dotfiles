syntax on
filetype plugin indent on

" set nocompatible
set number
set tabstop=4
set softtabstop=0
set shiftwidth=4
set expandtab
set path+=**
set wildmenu
set hidden

set wildignore=*.exe,*.dll,*.pdb

set cursorline
set ruler
" set t_Co=256
set guioptions=egmrti
set gfn=Monospace\ 10
" set autowrite

" utf-8 byte sequence
set encoding=utf-8

set is
set ignorecase
set smartcase

set clipboard=unnamedplus

set gp=git\ grep\ -n

" ---------- trim whitespace ----------
fun! TrimWhitespace()
    let l:save = winsaveview()
    keeppatterns %s/\s\+$//e
    call winrestview(l:save)
endfun
autocmd BufWritePre * call TrimWhitespace()

" ---------- Plugins ----------- "
let data_dir = has('nvim') ? stdpath('data') . '/site' : '~/.vim'
if empty(glob(data_dir . '/autoload/plug.vim'))
  silent execute '!curl -fLo '.data_dir.'/autoload/plug.vim --create-dirs  https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

call plug#begin('~/vimplugins')

Plug 'joshdick/onedark.vim'
Plug 'prabirshrestha/vim-lsp'
Plug 'mattn/vim-lsp-settings'
Plug 'tpope/vim-fugitive'
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'
Plug 'vim-test/vim-test'

call plug#end()

set background=dark
color onedark
highlight Operator ctermfg=grey

" ------------- key mappings -----------
" clear highlighting
nnoremap <Esc>  :nohlsearch<CR>

if executable('pylsp')
    " pip install python-lsp-server
    au User lsp_setup call lsp#register_server({
        \ 'name': 'pylsp',
        \ 'cmd': {server_info->['pylsp']},
        \ 'allowlist': ['python'],
        \ })
endif

function! s:on_lsp_buffer_enabled() abort
    setlocal omnifunc=lsp#complete
    " setlocal signcolumn=yes
    nmap <buffer> gi <plug>(lsp-definition)
    nmap <buffer> gd <plug>(lsp-declaration)
    nmap <buffer> gr <plug>(lsp-references)
    nmap <buffer> gl <plug>(lsp-document-diagnostics)
    nmap <buffer> <space>rn <plug>(lsp-rename)
    nmap <buffer> K <plug>(lsp-hover)
    nmap <buffer> <space>f <plug>(lsp-document-format)
endfunction

augroup lsp_install
    au!
    autocmd User lsp_buffer_enabled call s:on_lsp_buffer_enabled()
augroup END

set scl=no   " force the signcolumn to disappear

let mapleader="\\"

" Move blocks up and down
vnoremap J :m '>+1<CR>gv=gv
vnoremap K :m '<-2<CR>gv=gv

" Keep curser in the same position
nnoremap J mzJ`z

" Keey curser in the same position during move
nnoremap <C-d> <C-d>zz
nnoremap <C-u> <C-u>zz

" Paste over the highlighted word with copied word
xnoremap <Leader>p "\"_dP

" Keep curser during search
nnoremap n nzzzv
nnoremap N Nzzzv

nnoremap + <C-a>
nnoremap - <C-x>

nnoremap <C-h> <C-w><C-h>
nnoremap <C-l> <C-w><C-l>
nnoremap <C-j> <C-w><C-j>
nnoremap <C-k> <C-w><C-k>

nnoremap <space>ff :Files<CR>
nnoremap <space>fb :Buffers<CR>
nnoremap <space>ft :Tags<CR>
nnoremap <space>fh :Helptags<CR>

" Mapping selecting mappings
nmap <leader><tab> <plug>(fzf-maps-n)
xmap <leader><tab> <plug>(fzf-maps-x)
omap <leader><tab> <plug>(fzf-maps-o)

" Insert mode completion
imap <c-x><c-k> <plug>(fzf-complete-word)
imap <c-x><c-f> <plug>(fzf-complete-path)
imap <c-x><c-l> <plug>(fzf-complete-line)

nmap <silent> <space>tt :TestNearest<CR>
nmap <silent> <space>tf :TestFile<CR>
nmap <silent> <space>ta :TestSuite<CR>
nmap <silent> <space>tl :TestLast<CR>
nmap <silent> <space>tg :TestVisit<CR>

nnoremap <space>co :copen<CR>
nnoremap <space>cc :cclose<CR>

nnoremap <space>ls :ls<CR>

nnoremap <C-d> <C-d>zz
nnoremap <C-u> <C-u>zz

nnoremap <Tab> :bnext<CR>
nnoremap <S-Tab> :bprevious<CR>

nnoremap <C-Left> :vertical resize +3<CR>
nnoremap <C-Right> :vertial resize -3<CR>
